import os
import logging
import asyncio
from collections import defaultdict
from telegram import Update, InputMediaPhoto, InputMediaVideo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("messages.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

class MediaGroupManager:
    def __init__(self):
        self.media_groups = defaultdict(list)
        self.media_group_info = {}
        self.lock = asyncio.Lock()

    async def process_media(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–∫–∞)
            if update.message.video_note:
                await self.send_video_note(update, context, user)
                return
            
            media_group_id = update.message.media_group_id
            
            if media_group_id:
                # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞ –æ–±—ä–µ–∫—Ç —Å —É—á–µ—Ç–æ–º –ø–æ–¥–ø–∏—Å–∏
                if update.message.photo:
                    media = InputMediaPhoto(
                        media=update.message.photo[-1].file_id,
                        caption=update.message.caption
                    )
                elif update.message.video:
                    media = InputMediaVideo(
                        media=update.message.video.file_id,
                        caption=update.message.caption
                    )
                else:
                    return

                async with self.lock:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                    self.media_groups[media_group_id].append(media)
                    if media_group_id not in self.media_group_info:
                        self.media_group_info[media_group_id] = (user.username, user.id, update.message)
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                    asyncio.create_task(self.send_delayed_media_group(media_group_id, context))
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –º–µ–¥–∏–∞ (–∫—Ä–æ–º–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π)
            await self.send_single_media(update, context, user)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {e}")

    async def send_video_note(self, update, context, user):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä—É–∂–∫–æ–≤)"""
        try:
            # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username} (ID: {user.id}):"
            )
            
            # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫
            await context.bot.send_video_note(
                chat_id=ADMIN_ID,
                video_note=update.message.video_note.file_id
            )
            
            await update.message.reply_text("‚úÖ –í–∞—à–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ!")
            logger.info(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def send_delayed_media_group(self, media_group_id, context):
        await asyncio.sleep(3)  # –ñ–¥–µ–º —Å–±–æ—Ä –≤—Å–µ—Ö –º–µ–¥–∏–∞ –≤ –≥—Ä—É–ø–ø–µ
        
        async with self.lock:
            if media_group_id in self.media_groups and media_group_id in self.media_group_info:
                media_list = self.media_groups.pop(media_group_id)
                username, user_id, first_message = self.media_group_info.pop(media_group_id)
                
                try:
                    # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
                    await context.bot.send_message(
                        chat_id=ADMIN_ID,
                        text=f"–ê–ª—å–±–æ–º –∏–∑ {len(media_list)} –º–µ–¥–∏–∞ –æ—Ç @{username} (ID: {user_id}):"
                    )
                    
                    # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –≤–µ—Å—å –∞–ª—å–±–æ–º
                    await context.bot.send_media_group(
                        chat_id=ADMIN_ID,
                        media=media_list
                    )
                    
                    await first_message.reply_text("‚úÖ –í–∞—à –∞–ª—å–±–æ–º –±—ã–ª –ø–µ—Ä–µ—Å–ª–∞–Ω!")
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª—å–±–æ–º –∏–∑ {len(media_list)} –º–µ–¥–∏–∞")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")

    async def send_single_media(self, update, context, user):
        try:
            # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"–ú–µ–¥–∏–∞ –æ—Ç @{user.username} (ID: {user.id}):"
            )

            # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –º–µ–¥–∏–∞—Ñ–∞–π–ª
            if update.message.photo:
                await context.bot.send_photo(
                    chat_id=ADMIN_ID,
                    photo=update.message.photo[-1].file_id,
                    caption=update.message.caption
                )
            elif update.message.video:
                await context.bot.send_video(
                    chat_id=ADMIN_ID,
                    video=update.message.video.file_id,
                    caption=update.message.caption
                )
            elif update.message.voice:
                await context.bot.send_voice(
                    chat_id=ADMIN_ID,
                    voice=update.message.voice.file_id
                )
                
            await update.message.reply_text("‚úÖ –í–∞—à–µ –º–µ–¥–∏–∞ –±—ã–ª–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –º–µ–¥–∏–∞: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É:\n"
        "- –ü–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Ç–µ–∫—Å—Ç—ã/–º–µ–¥–∏–∞\n"
        "- –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–æ–≥–∏ (/getlog)\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!"
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} (ID: {user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")

async def forward_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    text = update.message.text

    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username} (ID: {user.id}):\n\n{text}"
        )
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ!")
        logger.info(f"–ü–µ—Ä–µ—Å–ª–∞–Ω —Ç–µ–∫—Å—Ç –æ—Ç @{user.username}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")

async def get_log(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤
        await context.bot.send_document(
            chat_id=ADMIN_ID,
            document=open("messages.log", "rb"),
            caption="üìã –õ–æ–≥–∏ –±–æ—Ç–∞"
        )
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{user.username} –∑–∞–ø—Ä–æ—Å–∏–ª –ª–æ–≥–∏")
    except FileNotFoundError:
        await update.message.reply_text("‚ö†Ô∏è –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        logger.warning("–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤")
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
media_manager = MediaGroupManager()

async def forward_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await media_manager.process_media(update, context)

def main() -> None:
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("getlog", get_log))
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        forward_text
    ))
    app.add_handler(MessageHandler(
        filters.PHOTO | filters.VIDEO | filters.VIDEO_NOTE | filters.VOICE,
        forward_media
    ))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == "__main__":
    main()
