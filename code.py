import os
import logging
from telegram import Update, InputMediaPhoto, InputMediaVideo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("messages.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
PORT = int(os.environ.get('PORT', 5000))  # –î–ª—è Render
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "")  # –î–ª—è webhook

async def is_admin(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return update.effective_user.id == ADMIN_ID

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} (ID: {user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å:\n"
        "- –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–≤–∫–ª—é—á–∞—è –∞–ª—å–±–æ–º—ã)\n"
        "- –í–∏–¥–µ–æ\n"
        "- –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!"
    )

async def forward_media_group(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    caption = f"–ú–µ–¥–∏–∞ –æ—Ç @{user.username} (ID: {user.id})"
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –æ—Ç @{user.username} (ID: {user.id}):"
        )

        if update.message.media_group_id:
            if not context.user_data.get('processing_media_group'):
                context.user_data['processing_media_group'] = True
                context.user_data['media_group'] = []
                context.user_data['caption'] = update.message.caption or caption
            
            if update.message.photo:
                media = InputMediaPhoto(media=update.message.photo[-1].file_id)
            elif update.message.video:
                media = InputMediaVideo(media=update.message.video.file_id)
            
            if update.message.caption:
                context.user_data['caption'] = update.message.caption
            
            context.user_data['media_group'].append(media)
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        if update.message.photo:
            await context.bot.send_photo(
                chat_id=ADMIN_ID,
                photo=update.message.photo[-1].file_id,
                caption=update.message.caption
            )
        elif update.message.video:
            await context.bot.send_video(
                chat_id=ADMIN_ID,
                video=update.message.video.file_id,
                caption=update.message.caption
            )
        elif update.message.voice:
            await context.bot.send_voice(
                chat_id=ADMIN_ID,
                voice=update.message.voice.file_id,
                caption=update.message.caption
            )
            logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username}")
            await update.message.reply_text("‚úÖ –í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ!")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø (–∞–ª—å–±–æ–º–æ–≤)
        if 'processing_media_group' in context.user_data:
            if len(context.user_data['media_group']) > 0:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await context.bot.send_media_group(
                    chat_id=ADMIN_ID,
                    media=context.user_data['media_group']
                )
                logger.info(f"–ê–ª—å–±–æ–º –∏–∑ {len(context.user_data['media_group'])} —Ñ–∞–π–ª–æ–≤ –æ—Ç @{user.username}")
            
            context.user_data.pop('processing_media_group', None)
            context.user_data.pop('media_group', None)
            context.user_data.pop('caption', None)
            
        await update.message.reply_text("‚úÖ –í–∞—à–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –ø–µ—Ä–µ—Å–ª–∞–Ω—ã!")
        logger.info(f"–ú–µ–¥–∏–∞ –æ—Ç @{user.username} (ID: {user.id})")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –º–µ–¥–∏–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –º–µ–¥–∏–∞")

async def forward_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    text = update.message.text

    logger.info(f"@{user.username} (ID: {user.id}): {text}")

    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username} (ID: {user.id}):"
        )
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=text
        )
        await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

async def get_log(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await is_admin(update):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        with open("messages.log", "rb") as log_file:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=log_file,
                caption="üìÑ –õ–æ–≥-—Ñ–∞–π–ª –±–æ—Ç–∞"
            )
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{update.effective_user.username} –∑–∞–ø—Ä–æ—Å–∏–ª –ª–æ–≥-—Ñ–∞–π–ª")
    except FileNotFoundError:
        await update.message.reply_text("‚ö†Ô∏è –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞")

def main() -> None:
    app = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("getlog", get_log))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, forward_text))
    app.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.VOICE, forward_media_group))

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    if WEBHOOK_URL and os.environ.get('RENDER'):
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook (Render)")
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=BOT_TOKEN,
            webhook_url=f"{WEBHOOK_URL}/{BOT_TOKEN}"
        )
    else:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling (–ª–æ–∫–∞–ª—å–Ω–æ)")
        app.run_polling(
            poll_interval=1.0,
            timeout=10,
            allowed_updates=Update.ALL_TYPES
        )

if __name__ == "__main__":
    main()
