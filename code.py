import os
import logging
import asyncio
from collections import defaultdict
from telegram import Update, InputMediaPhoto, InputMediaVideo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

class MediaGroupManager:
    def __init__(self):
        self.media_groups = defaultdict(list)
        self.lock = asyncio.Lock()

    async def process_media(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        try:
            if update.message.video_note:
                await self.send_video_note(update, context, user)
                return
            
            if update.message.media_group_id:
                await self.handle_media_group(update, context)
                return
            
            await self.send_single_media(update, context, user)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {e}")

    async def handle_media_group(self, update, context):
        user = update.effective_user
        media_group_id = update.message.media_group_id
    
        async with self.lock:
            if update.message.photo:
                media = InputMediaPhoto(
                    media=update.message.photo[-1].file_id,
                    caption=update.message.caption
                )
            elif update.message.video:
                media = InputMediaVideo(
                    media=update.message.video.file_id,
                    caption=update.message.caption
                )
            else:
                return

        self.media_groups[media_group_id].append((media, user))
        asyncio.create_task(self.send_media_group_delayed(media_group_id, context, update))

    async def send_media_group_delayed(self, media_group_id, context, update):
        await asyncio.sleep(3)
    
        async with self.lock:
            if media_group_id in self.media_groups:
                media_list, users = zip(*self.media_groups[media_group_id])
                user = users[0]
            
                try:
                    await context.bot.send_message(
                        chat_id=ADMIN_ID,
                        text=f"–ê–ª—å–±–æ–º –∏–∑ {len(media_list)} –º–µ–¥–∏–∞ –æ—Ç @{user.username}"
                    )
                    await context.bot.send_media_group(
                        chat_id=ADMIN_ID,
                        media=list(media_list)
                    )
                    await update.message.reply_text("‚úÖ –ê–ª—å–±–æ–º –ø–µ—Ä–µ—Å–ª–∞–Ω!")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞: {e}")
                finally:
                    del self.media_groups[media_group_id]

    async def send_video_note(self, update, context, user):
        try:
            await context.bot.send_video_note(
                chat_id=ADMIN_ID,
                video_note=update.message.video_note.file_id
            )
            await update.message.reply_text("‚úÖ –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def send_single_media(self, update, context, user):
        try:
            if update.message.photo:
                await context.bot.send_photo(
                    chat_id=ADMIN_ID,
                    photo=update.message.photo[-1].file_id,
                    caption=update.message.caption
                )
            elif update.message.video:
                await context.bot.send_video(
                    chat_id=ADMIN_ID,
                    video=update.message.video.file_id,
                    caption=update.message.caption
                )
            elif update.message.voice:
                await context.bot.send_voice(
                    chat_id=ADMIN_ID,
                    voice=update.message.voice.file_id
                )
                
            await update.message.reply_text("‚úÖ –ú–µ–¥–∏–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –º–µ–¥–∏–∞: {e}")

media_manager = MediaGroupManager()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç.")

async def keep_alive(context: ContextTypes.DEFAULT_TYPE):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    try:
        await context.bot.get_me()
        logger.info("Keep-alive: –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
    except Exception as e:
        logger.error(f"Keep-alive –æ—à–∏–±–∫–∞: {e}")

async def forward_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{update.effective_user.username}:\n{update.message.text}"
        )
        await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")

def main():
    try:
        app = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
        app.job_queue.run_repeating(keep_alive, interval=300, first=10)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, forward_text))
        app.add_handler(MessageHandler(
            filters.PHOTO | filters.VIDEO | filters.VIDEO_NOTE | filters.VOICE,
            media_manager.process_media
        ))

        logger.info("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å keep-alive")
        app.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.critical(f"üî¥ –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    main()
